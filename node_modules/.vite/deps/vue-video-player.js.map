{
  "version": 3,
  "sources": ["../../player/props.ts", "../../player/events.ts", "../../player/player.ts", "../../player/state.ts", "../../@videojs-player/vue/src/helper.ts", "../../@videojs-player/vue/src/component.ts", "../../@videojs-player/vue/src/index.ts", "../../vue-video-player/index.js"],
  "sourcesContent": ["import videojs from 'video.js'\nimport type { VideoJsPlayerOptions } from 'video.js'\nimport type { VideoJsPlayer } from './type'\n\ntype PropType<T = any> = { (): T }\ntype InferPropType<T> = T extends PropType<infer V> ? V : T\n\nconst prop = <T>(options: {\n  type: PropType<T>\n  default?: any\n  onChange?: (player: VideoJsPlayer, newValue: T, oldValue?: T) => any\n  onEvent?: (player: VideoJsPlayer, callback: (newValue: T) => void) => any\n}) => options\n\n// Standard <video> Element Options\n// https://videojs.com/guides/options/#standard\nconst videoProps = {\n  src: prop({\n    type: String,\n    onChange: (player, src) => player.src(src)\n  }),\n  width: prop({\n    type: Number,\n    onChange: (player, width) => player.width(width),\n    onEvent: (player, cb) => {\n      player.on(['playerresize', 'resize'], () => cb(player.width()))\n    }\n  }),\n  height: prop({\n    type: Number,\n    onChange: (player, height) => player.height(height),\n    onEvent: (player, cb) => {\n      player.on(['playerresize', 'resize'], () => cb(player.height()))\n    }\n  }),\n  preload: prop({\n    type: String as PropType<'auto' | 'metadata' | 'none'>,\n    // https://github.com/videojs/video.js/blob/main/src/js/player.js#L3696\n    onChange: (player, preload) => player.preload(preload as any)\n  }),\n  loop: prop({\n    type: Boolean,\n    onChange: (player, loop) => player.loop(loop)\n  }),\n  muted: prop({\n    type: Boolean,\n    onChange: (player, muted) => player.muted(muted),\n    onEvent: (player, cb) => player.on('volumechange', () => cb(player.muted()))\n  }),\n  poster: prop({\n    type: String,\n    onChange: (player, poster) => player.poster(poster),\n    onEvent: (player, cb) => player.on('posterchange', () => cb(player.poster()))\n  }),\n  controls: prop({\n    type: Boolean,\n    onChange: (player, controls) => player.controls(controls),\n    onEvent: (player, cb) => {\n      player.on('controlsenabled', () => cb(true))\n      player.on('controlsdisabled', () => cb(false))\n    }\n  }),\n  // https://videojs.com/guides/options/#autoplay\n  autoplay: prop({\n    type: [Boolean, String] as unknown as PropType<boolean | 'muted' | 'play' | 'any'>,\n    onChange: (player, autoplay) => player.autoplay(autoplay)\n  }),\n  // https://github.com/videojs/video.js/blob/main/src/js/player.js#L793\n  // Support both crossOrigin and crossorigin to reduce confusion and issues around the name.\n  crossorigin: prop({\n    type: String,\n    onChange: (player, value) => player.crossOrigin(value as any)\n  }),\n  crossOrigin: prop({\n    type: String,\n    onChange: (player, value) => player.crossOrigin(value as any)\n  }),\n  playsinline: prop({\n    type: Boolean,\n    onChange: (player, value) => player.playsinline(value)\n  }),\n  playsInline: prop({\n    type: Boolean,\n    onChange: (player, value) => player.playsinline(value)\n  })\n}\n\n// Video.js specific Options\n// https://videojs.com/guides/options/#videojs-specific-options\nconst videoJsProps = {\n  id: prop({ type: String }),\n  sources: prop({\n    type: Array as PropType<NonNullable<VideoJsPlayerOptions['sources']>>,\n    onChange: (player, sources) => player.src(sources)\n  }),\n  tracks: prop({\n    type: Array as PropType<NonNullable<VideoJsPlayerOptions['tracks']>>,\n    onChange: (player, newTracks) => {\n      // https://github.com/videojs/videojs-playlist/blob/main/src/play-item.js\n      const oldTracks = player.remoteTextTracks()\n      // This uses a `while` loop rather than `forEach` because the `TextTrackList` object is a live DOM list (not an array).\n      let index = oldTracks?.length || 0\n      while (index--) {\n        player.removeRemoteTextTrack(oldTracks[index] as any as HTMLTrackElement)\n      }\n      // Add new text tracks.\n      player.ready(() => {\n        newTracks.forEach((track) => player.addRemoteTextTrack(track, false))\n      })\n    }\n  }),\n  textTrackSettings: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['textTrackSettings']>>,\n    onChange: (player, value) => (player as any).textTrackSettings.options(value)\n  }),\n  language: prop({\n    type: String,\n    onChange: (player, language) => player.language(language),\n    onEvent: (player, cb) => player.on('languagechange', () => cb(player.language()))\n  }),\n  // https://videojs.com/guides/options/#languages\n  // https://videojs.com/guides/languages/\n  // https://docs.videojs.com/module-videojs-videojs.html#.addLanguage\n  languages: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['languages']>>\n  }),\n  playbackRates: prop({\n    type: Array as PropType<NonNullable<VideoJsPlayerOptions['playbackRates']>>,\n    onChange: (player, newRates) => player.playbackRates(newRates ?? []),\n    onEvent: (player, cb) => {\n      player.on('playbackrateschange', () => cb(player.playbackRates()))\n    }\n  }),\n  audioOnlyMode: prop({\n    type: Boolean,\n    onChange: (player, value) => player.audioOnlyMode(value)\n  }),\n  audioPosterMode: prop({\n    type: Boolean,\n    onChange: (player, value) => player.audioPosterMode(value)\n  }),\n  responsive: prop({\n    type: Boolean,\n    onChange: (player, value) => player.responsive(value)\n  }),\n  breakpoints: prop({\n    type: Object as PropType<Partial<videojs.Breakpoint>>,\n    onChange: (player, value) => player.breakpoints(value)\n  }),\n  fluid: prop({\n    type: Boolean,\n    onChange: (player, value) => player.fluid(value)\n  }),\n  // https://docs.videojs.com/player#fill\n  fill: prop({\n    type: Boolean,\n    onChange: (player, value) => player.fill(value)\n  }),\n  aspectRatio: prop({\n    type: String,\n    onChange: (player, ratio) => player.aspectRatio(ratio)\n  }),\n  // https://videojs.com/guides/options/#fullscreen\n  fullscreen: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['fullscreen']>>\n  }),\n  // https://videojs.com/guides/options/#liveui\n  liveui: prop({ type: Boolean }),\n  // https://videojs.com/guides/options/#livetrackertrackingthreshold\n  liveTracker: prop({\n    type: Object as PropType<\n      Partial<{\n        trackingThreshold: number\n        liveTolerance: number\n        [key: string]: any\n      }>\n    >\n  }),\n  disablePictureInPicture: prop({\n    type: Boolean,\n    onChange: (player, value) => player.disablePictureInPicture(value)\n  }),\n  notSupportedMessage: prop({ type: String }),\n  normalizeAutoplay: prop({ type: Boolean }),\n  noUITitleAttributes: prop({ type: Boolean }),\n  preferFullWindow: prop({ type: Boolean }),\n  suppressNotSupportedError: prop({ type: Boolean }),\n  techCanOverridePoster: prop({ type: Boolean }),\n  reportTouchActivity: prop({ type: Boolean }),\n  techOrder: prop({ type: Array as PropType<Array<string>> }),\n  // https://videojs.com/guides/options/#inactivitytimeout\n  inactivityTimeout: prop({ type: Number }),\n  userActions: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['userActions']>>\n  }),\n  // https://videojs.com/guides/options/#plugins\n  // https://videojs.com/guides/plugins/\n  plugins: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['plugins']>>\n  }),\n  restoreEl: prop({ type: [Boolean, Object] as unknown as PropType<boolean | Element> }),\n  'vtt.js': prop({ type: String })\n}\n\n// Video.js component Options\n// https://videojs.com/guides/options/#component-options\nconst videoJsComponentProps = {\n  children: prop({\n    type: [Array, Object] as unknown as PropType<NonNullable<VideoJsPlayerOptions['children']>>\n  }),\n  // https://videojs.com/guides/options/#controlbarremainingtimedisplaydisplaynegative\n  controlBar: prop({\n    type: Object as PropType<NonNullable<VideoJsPlayerOptions['controlBar']>>,\n    onChange: (player, value) => player.controlBar.options(value)\n  })\n}\n\n// Video.js tech Options\n// https://videojs.com/guides/options/#tech-options\nconst videoJsTechProps = {\n  html5: prop({\n    type: Object as PropType<\n      Partial<{\n        vhs: any\n        nativeControlsForTouch: boolean\n        nativeAudioTracks: boolean\n        nativeTextTracks: boolean\n        nativeVideoTracks: boolean\n        preloadTextTracks: boolean\n      }>\n    >\n  })\n}\n\n// Framework component Options\nconst componentProps = {\n  volume: prop({\n    type: Number,\n    onChange: (player, volume) => player.volume(volume),\n    onEvent: (player, cb) => player.on('volumechange', () => cb(player.volume()))\n  }),\n  playbackRate: prop({\n    type: Number,\n    onChange(player, rate) {\n      // When playbackRate changes, sync the value to defaultPlaybackRate to\n      // ensure that the last saved playbackRate is automatically read when the video changes source.\n      player.playbackRate(rate)\n      player.defaultPlaybackRate(rate)\n    },\n    onEvent(player, callback) {\n      player.on('ratechange', () => {\n        callback(player.playbackRate())\n      })\n    }\n  }),\n  // Fallback for video.js options\n  options: prop({\n    type: Object as PropType<VideoJsPlayerOptions>\n  })\n}\n\nexport const propsConfig = {\n  ...videoProps,\n  ...videoJsProps,\n  ...videoJsComponentProps,\n  ...videoJsTechProps,\n  ...componentProps\n} as const\n\nexport type PropsConfig = typeof propsConfig\nexport type PropKey = keyof PropsConfig\nexport type Props = {\n  [K in PropKey]?: InferPropType<typeof propsConfig[K]['type']>\n}\n\nexport const propKeys = Object.keys(propsConfig) as Array<PropKey>\n", "// https://www.w3.org/2010/05/video/mediaevents.html\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#events\n// https://github.com/videojs/video.js/blob/main/src/js/tech/html5.js#L1204\nconst html5EventsMap = {\n  loadstart: 'onLoadStart',\n  suspend: 'onSuspend',\n  abort: 'onAbort',\n  error: 'onError',\n  emptied: 'onEmptied',\n  stalled: 'onStalled',\n  loadedmetadata: 'onLoadedMetadata',\n  loadeddata: 'onLoadedData',\n  canplay: 'onCanPlay',\n  canplaythrough: 'onCanPlayThrough',\n  playing: 'onPlaying',\n  waiting: 'onWaiting',\n  seeking: 'onSeeking',\n  seeked: 'onSeeked',\n  ended: 'onEnded',\n  durationchange: 'onDurationChange',\n  timeupdate: 'onTimeUpdate',\n  progress: 'onProgress',\n  play: 'onPlay',\n  pause: 'onpause',\n  ratechange: 'onRateChange',\n  resize: 'onResize',\n  volumechange: 'onVolumeChange'\n} as const\n\n// https://docs.videojs.com/player#event\nconst videoJsEventsMap = {\n  posterchange: 'onPosterChange',\n  languagechange: 'onLanguageChange',\n  fullscreenchange: 'onFullscreenChange',\n  playbackrateschange: 'onPlaybackRatesChange',\n  controlsdisabled: 'onControlsDisabled',\n  controlsenabled: 'onControlsEnabled',\n  enterFullWindow: 'onEnterFullWindow',\n  exitFullWindow: 'onExitFullWindow',\n  enterpictureinpicture: 'onEnterPictureInPicture',\n  leavepictureinpicture: 'onLeavePictureInPicture',\n  // https://docs.videojs.com/player#event:sourceset\n  sourceset: 'onSourceSet',\n  texttrackchange: 'onTextTrackChange',\n  textdata: 'onTextData',\n  useractive: 'onUserActive',\n  userinactive: 'onUserInactive',\n  usingcustomcontrols: 'onUsingCustomControls',\n  usingnativecontrols: 'onUsingNativeControls',\n  dispose: 'onDispose'\n} as const\n\nconst videoJsPluginEventsMap = {\n  beforepluginsetup: 'onBeforePluginSetup',\n  pluginsetup: 'onPluginSetup'\n  // pluginsetup:$name\n} as const\n\nconst videoJsComponentEventsMap = {\n  componentresize: 'onComponentResize',\n  playerresize: 'onPlayerResize',\n  ready: 'onReady',\n  tap: 'onTap'\n} as const\n\nexport const eventsMap = {\n  ...html5EventsMap,\n  ...videoJsEventsMap,\n  ...videoJsPluginEventsMap,\n  ...videoJsComponentEventsMap\n} as const\n\nexport type EventMap = typeof eventsMap\nexport type EventKey = keyof EventMap\nexport const events = Object.keys(eventsMap) as Array<EventKey>\n\nexport const camelCaseEvents = Object.values(eventsMap)\nexport type CamelCaseEventKey = typeof camelCaseEvents[number]\n", "import videoJs, { VideoJsPlayerOptions } from 'video.js'\nimport { propsConfig, Props, PropKey } from './props'\nimport { events, EventKey } from './events'\nimport type { VideoJsPlayer } from './type'\n\n/**\n * Transform `string` className to `array`.\n * @link https://github.com/videojs/video.js/pull/7798\n * @link https://github.com/videojs/video.js/issues/7685\n * @description ```\n *  input: \" test-a    test-b   test-c  \"\n *  output: [\"test-a\", \"test-b\", \"test-c\"]\n * ```\n */\nconst standardizeClass = (className: string | void) => {\n  const trimmed = className?.trim().replace(/\\s+/g, ' ')\n  return trimmed ? trimmed.split(' ') ?? [] : []\n}\n\nexport interface CreatePlayerOptions {\n  props: Props\n  element: HTMLElement\n  className?: string\n  onEvent(eventName: EventKey, payload: Event): void\n}\n\nexport type PlayerResult = ReturnType<typeof createPlayer>\nexport const createPlayer = ({ props, element, className, onEvent }: CreatePlayerOptions) => {\n  // Exclude fallback options.\n  const { options: fallbackOptions = {}, ...optProps } = props\n\n  // Exclude undefined value.\n  const propOptions: Omit<Props, 'options'> = {}\n  const optPropKeys = Object.keys(optProps) as Array<keyof typeof optProps>\n  optPropKeys.forEach((key) => {\n    const value = optProps[key]\n    if (value !== undefined) {\n      // @ts-ignore\n      propOptions[key] = value\n    }\n  })\n\n  // Merge fallback options & exclude component options.\n  const { volume, playbackRate, ...initOptions } = {\n    ...propOptions,\n    ...fallbackOptions\n  }\n\n  // Merge some confusing prop names.\n  const videoJsOptions = {\n    ...initOptions,\n    // https://videojs.com/guides/options/#restoreel\n    // Since the dispose > restore element side effect of Video.js occurs after the component has been unmounted,\n    // a DOM retention error will occur if true, so it cannot be set to true.\n    // restoreEl: initOptions.restoreEl ?? false,\n    // Video.js only supports the `playsinline` property.\n    playsinline: initOptions.playsinline ?? initOptions.playsInline\n  }\n\n  // https://videojs.com/guides/embeds/\n  // https://videojs.com/guides/react/\n  // MARK: Player div ingest\n  // There are three ways to initialize a player, the \"Player div ingest\" type is the most suitable in a component scenario\n  // because it generates the least amount of DOM side effects,\n  // and this way it can fully utilize the existing div outer container and video elements without changing the DOM structure.\n  // The problem is that the Video.js player, when instantiated, reads the className property of the video element as the className of the outer container,\n  // but the component needs to satisfy the user's need to \"be able to use the className to specify the style from the moment the component is rendered\".\n  // So we need to assume that only the className specified by the user through the component is needed for style control,\n  // while the basic \"video-js\" - like className is another internal className with a specific side effect and used only for initializing the player.\n  // So we need to distinguish the className into innerClassName, which is controlled internally by the component and remains unchanged,\n  // and userClassName, which will be applied to the container element at times like init and change.\n  // The reason why userClassName cannot be used directly as className for video elements is that it may cause unintended style side effects,\n  // such as misalignment or recursive styles, due to the different DOM hierarchy.\n  // MARK: RawHTML\n  // A better solution may exist to create the player with a freshly created video element while maintaining a mounted identifier,\n  // and when the player is instantiated, return the instantiated DOM entirely through the component,\n  // but this relies on the framework supporting a RawHTML - like API - https://github.com/ reactjs/rfcs/pull/129\n  // Custom controls capabilities can be implemented through the Video.js Component - https://videojs.com/guides/react/\n  const player = videoJs(element, videoJsOptions, function () {\n    // Stringing video.js events to vue emits.\n    events.forEach((eventKey) => {\n      this.on(eventKey, (payload) => {\n        onEvent(eventKey, payload)\n      })\n    })\n\n    // init src\n    if (initOptions.src && !initOptions.sources) {\n      this.src(initOptions.src)\n    }\n\n    // init volume\n    if (volume && Number.isFinite(volume)) {\n      this.volume(volume)\n    }\n\n    // init playbackRate\n    // https://github.com/videojs/video.js/issues/5128\n    // https://github.com/videojs/video.js/issues/2516\n    // https://github.com/videojs/videojs-playlist/issues/158\n    // https://github.com/sampotts/plyr/blob/master/src/js/plyr.js#L677\n    // https://github.com/bytedance/xgplayer/blob/master/packages/xgplayer/src/skin/controls/playbackRate.js#L30\n    if (playbackRate && Number.isFinite(playbackRate)) {\n      // Video always reads defaultPlaybackRate as the initial playbackRate when switching video sources.\n      this.defaultPlaybackRate(playbackRate)\n      // Ensures that all synchronization code has been executed by the time playbackRate is executed.\n      setTimeout(() => {\n        this.playbackRate(playbackRate)\n      }, 0)\n    }\n  }) as VideoJsPlayer\n\n  // The component needs to be initialized with the initial className of the container element to\n  // avoid flickering of the style caused by applying the className after the player has been instantiated.\n  // There are two separate times when initClassName is consumed.\n  // 1. when the component is first rendered, before the player is instantiated,\n  // the className should act on the root container of the component's original element,\n  // which allows the user to control the style before the component is mounted.\n  // 2. Before the component is mounted, `addClass(initClassName)` should be applied to the player immediately after the player is created,\n  // as Video.js does not support such an option for className, so we have to do this,\n  // and currently the synchronization feature of the browser ensures that the user\n  // does not perceive the \"init(component) > remove(createPlayer) > add(player.addClass)\" replacement process for className.\n  if (className) {\n    standardizeClass(className).map((name) => player.addClass(name))\n  }\n\n  // Set new class names to Video.js container element.\n  const updateClassNames = (oldClassName: string | void, newClassName: string | void) => {\n    standardizeClass(oldClassName).map((name) => player.removeClass(name))\n    standardizeClass(newClassName).map((name) => player.addClass(name))\n  }\n\n  // Set new options to Video.js config.\n  const updateOptions = (options: VideoJsPlayerOptions) => {\n    player.options?.(options ?? {})\n  }\n\n  // Set new prop value to Video.js config.\n  const updatePropOption = <K extends PropKey>(key: K, value: Props[K]) => {\n    updateOptions({ [key]: value })\n    propsConfig[key]?.onChange?.(player, value as never)\n  }\n\n  const disposePlayer = () => player.dispose()\n\n  return {\n    player,\n    dispose: disposePlayer,\n    updateClassNames,\n    updateOptions,\n    updatePropOption\n  }\n}\n", "import type { VideoJsPlayer as Player } from './type'\n\n// https://videojs.com/advanced/\n// https://github.com/videojs/videojs.com/blob/main/src/components/HomeComponents/AdvancedExample/mediaProperties.js\n// https://github.com/videojs/videojs.com/blob/main/src/components/HomeComponents/AdvancedExample/MediaPropertyItem.jsx\nconst StateConfig = {\n  // autoplay: { getter: (player: P) => player.autoplay() }, // ✘\n  // loop: { getter: (player: P) => player.loop() }, // ✘\n  // preload: { getter: (player: P) => player.preload() }, // ✘\n  // playsInline: { getter: (player: P) => player.playsinline() }, // ✘\n  // crossOrigin: { getter: (player: P) => player.crossOrigin() }, // ✘\n  src: {\n    getter: (player: Player) => player.src()\n  },\n  currentSrc: {\n    getter: (player: Player) => player.currentSrc()\n  },\n  currentSource: {\n    getter: (player: Player) => player.currentSource()\n  },\n  width: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.width()\n  },\n  height: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.height()\n  },\n  currentWidth: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.currentWidth()\n  },\n  currentHeight: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.currentHeight()\n  },\n  videoWidth: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.videoWidth()\n  },\n  videoHeight: {\n    events: ['resize', 'playerresize'],\n    getter: (player: Player) => player.videoHeight()\n  },\n  controls: {\n    events: ['controlsdisabled', 'controlsenabled'],\n    getter: (player: Player) => player.controls()\n  },\n  volume: {\n    events: ['volumechange'],\n    getter: (player: Player) => player.volume()\n  },\n  muted: {\n    events: ['volumechange'],\n    getter: (player: Player) => player.muted()\n  },\n  poster: {\n    events: ['posterchange'],\n    getter: (player: Player) => player.poster()\n  },\n  seeking: {\n    events: ['seeking'],\n    getter: (player: Player) => player.seeking()\n  },\n  paused: {\n    events: ['pause', 'play', 'playing'],\n    getter: (player: Player) => player.paused()\n  },\n  ended: {\n    events: ['ended', 'play'],\n    getter: (player: Player) => player.ended()\n  },\n  currentTime: {\n    events: ['timeupdate'],\n    getter: (player: Player) => player.currentTime()\n  },\n  duration: {\n    events: ['durationchange'],\n    getter: (player: Player) => player.duration()\n  },\n  playbackRate: {\n    events: ['ratechange'],\n    getter: (player: Player) => player.playbackRate()\n  },\n  playbackRates: {\n    events: ['playbackrateschange'],\n    getter: (player: Player) => player.playbackRates()\n  },\n  isFullscreen: {\n    events: ['fullscreenchange'],\n    getter: (player: Player) => player.isFullscreen()\n  },\n  isInPictureInPicture: {\n    events: ['enterpictureinpicture', 'leavepictureinpicture'],\n    getter: (player: Player) => player.isInPictureInPicture()\n  },\n  isLive: {\n    getter: (player: Player) => player.liveTracker?.isLive()\n  },\n  language: {\n    events: ['languagechange'],\n    getter: (player: Player) => player.language()\n  },\n  userActive: {\n    events: ['useractive', 'userinactive'],\n    getter: (player: Player) => player.userActive()\n  },\n  readyState: {\n    events: ['loadeddata'],\n    getter: (player: Player) => player.readyState()\n  },\n  networkState: {\n    events: ['loadeddata', 'error'],\n    getter: (player: Player) => player.networkState()\n  },\n  error: {\n    events: ['loadeddata', 'error'],\n    getter: (player: Player) => player.error()\n  },\n  buffered: {\n    events: ['progress'],\n    getter: (player: Player) => player.buffered()\n  },\n  bufferedPercent: {\n    events: ['progress'],\n    getter: (player: Player) => player.bufferedPercent()\n  },\n  played: {\n    events: ['timeupdate'],\n    getter: (player: Player) => player.played()\n  },\n  seekable: {\n    events: ['progress', 'seeked'],\n    getter: (player: Player) => player.seekable()\n  },\n  audioTracks: {\n    getter: (player: Player) => player.audioTracks?.()\n  },\n  videoTracks: {\n    getter: (player: any) => player.videoTracks?.()\n  },\n  textTracks: {\n    getter: (player: Player) => player.textTracks?.()\n  }\n}\n\ntype PlayerBastState = {\n  [K in keyof typeof StateConfig]: ReturnType<typeof StateConfig[K]['getter']>\n}\nexport interface PlayerState extends PlayerBastState {\n  playing: boolean\n  waiting: boolean\n}\n\nexport interface CreatePlayerStateOptions {\n  onInit: (state: PlayerState) => void\n  onUpdate: <K extends keyof PlayerState>(key: K, value: PlayerState[K], state: PlayerState) => void\n}\n\nexport const createPlayerState = (player: Player, options: CreatePlayerStateOptions) => {\n  const keys = Object.keys(StateConfig) as Array<keyof typeof StateConfig>\n  const state = keys.reduce(\n    (result, key) => ({ ...result, [key]: StateConfig[key].getter(player) }),\n    { playing: false, waiting: false } as PlayerState\n  )\n\n  // update state\n  const updateState = (key: keyof PlayerState, value: any) => {\n    state[key] = value as never\n    options.onUpdate(key, value, { ...state })\n  }\n\n  // playing state https://github.com/videojs/video.js/issues/181\n  // un-loop: play > playing > pause > ended\n  // loop: play > playing > [ended > restart] waiting > playing\n  player.on(['pause', 'ended'], () => {\n    updateState('playing', false)\n  })\n  player.on(['play', 'playing'], () => {\n    updateState('playing', true)\n  })\n\n  // https://github.com/videojs/video.js/blob/75ea699273d659593d95429d185865fb6e49cb93/src/js/player.js#L1743\n  player.on('waiting', () => {\n    updateState('waiting', true)\n    const timeWhenWaiting = player.currentTime()\n    const timeUpdateListener = () => {\n      if (timeWhenWaiting !== player.currentTime()) {\n        updateState('waiting', false)\n        player.off('timeupdate', timeUpdateListener)\n      }\n    }\n    player.on('timeupdate', timeUpdateListener)\n  })\n\n  keys.forEach((key) => {\n    const target = StateConfig[key]\n    const baseEvents = ['loadstart', 'loadedmetadata']\n    player.on(baseEvents.concat((target as any).events ?? []), () => {\n      updateState(key, target.getter(player))\n    })\n  })\n\n  // init state\n  options.onInit({ ...state })\n}\n", "import type { PropsConfig, PropKey, EventKey, VideoJsPlayer } from '../../../player'\nimport { propsConfig, propKeys, events } from '../../../player'\n\nconst twoWayPropKeys = propKeys.filter((key) => Boolean(propsConfig[key].onEvent))\nconst getPropUpdateEventName = (key: PropKey) => `update:${key}`\n\n// Convert all supported Video.js configuration changes to two-way binding events.\nexport const bindPropUpdateEvent = (options: {\n  player: VideoJsPlayer\n  onEvent: (key: EventKey, value: any) => void\n}) => {\n  twoWayPropKeys.forEach((key) => {\n    propsConfig[key]?.onEvent?.(options.player, (newValue: unknown) => {\n      options.onEvent(getPropUpdateEventName(key) as EventKey, newValue)\n    })\n  })\n}\n\n// Add two-way binding events to all props that have onEvent.\n// The event type information is missing here, but it is necessary.\nexport const normalizedEvents = [\n  ...events,\n  ...twoWayPropKeys.map(getPropUpdateEventName)\n] as typeof events\n\n// Set the default value of all Boolean type's props to undefined.\n// https://vuejs.org/guide/components/props.html#boolean-casting\nexport const normalizedProps = propKeys.reduce((result, key) => {\n  const prop = propsConfig[key]\n  const types = Array.isArray(prop.type) ? prop.type : [prop.type]\n  const newProp = { ...prop }\n  if (types.includes(Boolean)) {\n    newProp.default = void 0\n  }\n\n  return { ...result, [key]: newProp }\n}, {} as PropsConfig)\n", "import { defineComponent, onMounted, onBeforeUnmount, h, normalizeClass } from 'vue'\nimport { shallowRef, ref, computed, readonly, watch, toRaw, DeepReadonly, PropType } from 'vue'\nimport { createPlayer, createPlayerState, propKeys } from '../../../player'\nimport { PlayerState, PlayerResult } from '../../../player'\nimport { normalizedProps, normalizedEvents, bindPropUpdateEvent } from './helper'\n\nconst MOUNTED_EVENT_NAME = 'mounted'\nconst UNMOUNTED_EVENT_NAME = 'unmounted'\n\nexport default defineComponent({\n  name: 'VueVideoPlayer',\n  props: { ...normalizedProps, class: [String, Object, Array] as PropType<unknown> },\n  emits: [...normalizedEvents, MOUNTED_EVENT_NAME, UNMOUNTED_EVENT_NAME],\n  // https://github.com/vuejs/rfcs/pull/192\n  // https://github.com/vuejs/core/pull/2693\n  // slots: Object as () => { player: VideoJsPlayer; state: DeepReadonly<PlayerState> },\n  setup(props, context) {\n    const { class: initClassName, ...rawProps } = toRaw(props)\n    const mounted = shallowRef(false)\n    const videoElement = shallowRef<HTMLVideoElement | null>(null)\n    const playerResult = shallowRef<PlayerResult | null>(null)\n    const videoJsPlayer = computed(() => {\n      return playerResult.value ? playerResult.value.player : null\n    })\n\n    const state = ref<PlayerState | null>(null)\n    const readOnlyState = computed<DeepReadonly<PlayerState> | null>(() => {\n      return state.value ? readonly(state.value) : null\n    })\n\n    onMounted(() => {\n      // Create player.\n      const playerRes = createPlayer({\n        element: videoElement.value!,\n        props: rawProps,\n        onEvent: context.emit\n      })\n\n      // Sync Video.js config change to update:prop event.\n      bindPropUpdateEvent({\n        player: playerRes.player,\n        onEvent: context.emit\n      })\n\n      // Sync Vue class name to Video.js container.\n      watch(\n        () => props.class,\n        (newClassName, oldClassName) => {\n          const ocn = normalizeClass(oldClassName)\n          const ncn = normalizeClass(newClassName)\n          playerRes.updateClassNames(ocn, ncn)\n        },\n        { immediate: true }\n      )\n\n      // Sync fallback options to Video.js config.\n      watch(\n        () => props.options,\n        (newOptions) => playerRes.updateOptions(newOptions ?? {}),\n        { deep: true }\n      )\n\n      // Sync component props to Video.js config.\n      propKeys\n        .filter((key) => key !== 'options')\n        .forEach((key) => {\n          watch(\n            () => props[key],\n            (newValue) => playerRes.updatePropOption(key, newValue),\n            { deep: true }\n          )\n        })\n\n      // Create player state.\n      createPlayerState(playerRes.player, {\n        onInit(initState) {\n          state.value = initState\n        },\n        onUpdate(key, value) {\n          if (state.value) {\n            state.value[key] = value\n          }\n        }\n      })\n\n      // Emit mounted event.\n      playerResult.value = playerRes\n      mounted.value = true\n      context.emit(MOUNTED_EVENT_NAME, {\n        video: videoElement.value,\n        player: videoJsPlayer.value,\n        state: readOnlyState.value\n      })\n    })\n\n    onBeforeUnmount(() => {\n      if (playerResult.value) {\n        playerResult.value.dispose()\n        playerResult.value = null\n        state.value = null\n        context.emit(UNMOUNTED_EVENT_NAME)\n      }\n    })\n\n    return () => {\n      return h('div', { 'data-vjs-player': '', class: normalizeClass(initClassName) }, [\n        h('video', {\n          class: ['video-js', 'v-video-player'],\n          ref: videoElement\n        }),\n        mounted.value &&\n          context.slots.default?.({\n            video: videoElement.value!,\n            player: videoJsPlayer.value!,\n            state: readOnlyState.value!\n          })\n      ])\n    }\n  }\n})\n", "import type { Plugin } from 'vue'\nimport Component from './component'\n\nexport type {\n  Props as VideoPlayerProps,\n  EventKey as VideoPlayerEvents,\n  PlayerState as VideoPlayerState\n} from '../../../player'\n\nexport const VideoPlayer = Component\nexport const install: Plugin = (app) => {\n  app.component('VideoPlayer', Component)\n  app.component(Component.name, Component)\n}\n\nexport default {\n  VideoPlayer: Component,\n  install\n}\n", "import VueVideoPlayer from '@videojs-player/vue'\n\nexport * from '@videojs-player/vue'\nexport default VueVideoPlayer\n"],
  "mappings": "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",
  "names": ["const", "videoProps", "src", "type", "String", "onChange", "player", "width", "Number", "onEvent", "cb", "on", "height", "preload", "loop", "Boolean", "muted", "poster", "controls", "autoplay", "crossorigin", "value", "crossOrigin", "playsinline", "playsInline", "videoJsProps", "id", "sources", "Array", "tracks", "newTracks", "oldTracks", "remoteTextTracks", "index", "length", "removeRemoteTextTrack", "ready", "forEach", "track", "addRemoteTextTrack", "textTrackSettings", "Object", "options", "language", "languages", "playbackRates", "newRates", "audioOnlyMode", "audioPosterMode", "responsive", "breakpoints", "fluid", "fill", "aspectRatio", "ratio", "fullscreen", "liveui", "liveTracker", "disablePictureInPicture", "notSupportedMessage", "normalizeAutoplay", "noUITitleAttributes", "preferFullWindow", "suppressNotSupportedError", "techCanOverridePoster", "reportTouchActivity", "techOrder", "inactivityTimeout", "userActions", "plugins", "restoreEl", "videoJsComponentProps", "children", "controlBar", "videoJsTechProps", "html5", "componentProps", "volume", "playbackRate", "rate", "defaultPlaybackRate", "callback", "propsConfig", "propKeys", "keys", "eventsMap", "assign", "loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange", "posterchange", "languagechange", "fullscreenchange", "playbackrateschange", "controlsdisabled", "controlsenabled", "enterFullWindow", "exitFullWindow", "enterpictureinpicture", "leavepictureinpicture", "sourceset", "texttrackchange", "textdata", "useractive", "userinactive", "usingcustomcontrols", "usingnativecontrols", "dispose", "beforepluginsetup", "pluginsetup", "componentresize", "playerresize", "tap", "events", "values", "standardizeClass", "className", "trimmed", "trim", "replace", "_a", "split", "StateConfig", "getter", "currentSrc", "currentSource", "currentWidth", "currentHeight", "videoWidth", "videoHeight", "paused", "currentTime", "duration", "isFullscreen", "isInPictureInPicture", "isLive", "userActive", "readyState", "networkState", "buffered", "bufferedPercent", "played", "seekable", "audioTracks", "call", "videoTracks", "textTracks", "twoWayPropKeys", "filter", "key", "getPropUpdateEventName", "normalizedEvents", "concat", "map", "normalizedProps", "reduce", "result", "prop", "types", "isArray", "newProp", "includes", "default", "obj", "Component", "defineComponent", "name", "props", "class", "emits", "setup", "context", "toRaw", "initClassName", "rawProps", "__rest", "mounted", "shallowRef", "videoElement", "playerResult", "videoJsPlayer", "computed", "state", "ref", "readOnlyState", "readonly", "onMounted", "playerRes", "n", "element", "fallbackOptions", "optProps", "propOptions", "_b", "initOptions", "videoJsOptions", "videoJs", "e", "eventKey", "this", "payload", "isFinite", "setTimeout", "addClass", "updateOptions", "oldClassName", "newClassName", "removeClass", "emit", "newValue", "watch", "ocn", "normalizeClass", "ncn", "updateClassNames", "immediate", "newOptions", "deep", "updatePropOption", "updateState", "onUpdate", "timeWhenWaiting", "timeUpdateListener", "off", "target", "onInit", "initState", "video", "onBeforeUnmount", "h", "slots", "VideoPlayer", "install", "app", "component"]
}
