import {
  computed,
  defineComponent,
  h,
  normalizeClass,
  onBeforeUnmount,
  onMounted,
  readonly,
  ref,
  shallowRef,
  toRaw,
  watch
} from "./chunk-U3LI7FBV.js";
import {
  video_es_default
} from "./chunk-6BOWL5RR.js";
import "./chunk-5WRI5ZAA.js";

// node_modules/@videojs-player/vue/dist/videojs-player.esm.js
function g(e, n) {
  var t = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && n.indexOf(r) < 0 && (t[r] = e[r]);
  if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
    var o = 0;
    for (r = Object.getOwnPropertySymbols(e); o < r.length; o++) n.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (t[r[o]] = e[r[o]]);
  }
  return t;
}
var d = { src: { type: String, onChange: function(e, n) {
  return e.src(n);
} }, width: { type: Number, onChange: function(e, n) {
  return e.width(n);
}, onEvent: function(e, n) {
  e.on(["playerresize", "resize"], function() {
    return n(e.width());
  });
} }, height: { type: Number, onChange: function(e, n) {
  return e.height(n);
}, onEvent: function(e, n) {
  e.on(["playerresize", "resize"], function() {
    return n(e.height());
  });
} }, preload: { type: String, onChange: function(e, n) {
  return e.preload(n);
} }, loop: { type: Boolean, onChange: function(e, n) {
  return e.loop(n);
} }, muted: { type: Boolean, onChange: function(e, n) {
  return e.muted(n);
}, onEvent: function(e, n) {
  return e.on("volumechange", function() {
    return n(e.muted());
  });
} }, poster: { type: String, onChange: function(e, n) {
  return e.poster(n);
}, onEvent: function(e, n) {
  return e.on("posterchange", function() {
    return n(e.poster());
  });
} }, controls: { type: Boolean, onChange: function(e, n) {
  return e.controls(n);
}, onEvent: function(e, n) {
  e.on("controlsenabled", function() {
    return n(true);
  }), e.on("controlsdisabled", function() {
    return n(false);
  });
} }, autoplay: { type: [Boolean, String], onChange: function(e, n) {
  return e.autoplay(n);
} }, crossorigin: { type: String, onChange: function(e, n) {
  return e.crossOrigin(n);
} }, crossOrigin: { type: String, onChange: function(e, n) {
  return e.crossOrigin(n);
} }, playsinline: { type: Boolean, onChange: function(e, n) {
  return e.playsinline(n);
} }, playsInline: { type: Boolean, onChange: function(e, n) {
  return e.playsinline(n);
} } };
var f = { id: { type: String }, sources: { type: Array, onChange: function(e, n) {
  return e.src(n);
} }, tracks: { type: Array, onChange: function(e, n) {
  for (var t = e.remoteTextTracks(), r = (null == t ? void 0 : t.length) || 0; r--; ) e.removeRemoteTextTrack(t[r]);
  e.ready(function() {
    n.forEach(function(n2) {
      return e.addRemoteTextTrack(n2, false);
    });
  });
} }, textTrackSettings: { type: Object, onChange: function(e, n) {
  return e.textTrackSettings.options(n);
} }, language: { type: String, onChange: function(e, n) {
  return e.language(n);
}, onEvent: function(e, n) {
  return e.on("languagechange", function() {
    return n(e.language());
  });
} }, languages: { type: Object }, playbackRates: { type: Array, onChange: function(e, n) {
  return e.playbackRates(null != n ? n : []);
}, onEvent: function(e, n) {
  e.on("playbackrateschange", function() {
    return n(e.playbackRates());
  });
} }, audioOnlyMode: { type: Boolean, onChange: function(e, n) {
  return e.audioOnlyMode(n);
} }, audioPosterMode: { type: Boolean, onChange: function(e, n) {
  return e.audioPosterMode(n);
} }, responsive: { type: Boolean, onChange: function(e, n) {
  return e.responsive(n);
} }, breakpoints: { type: Object, onChange: function(e, n) {
  return e.breakpoints(n);
} }, fluid: { type: Boolean, onChange: function(e, n) {
  return e.fluid(n);
} }, fill: { type: Boolean, onChange: function(e, n) {
  return e.fill(n);
} }, aspectRatio: { type: String, onChange: function(e, n) {
  return e.aspectRatio(n);
} }, fullscreen: { type: Object }, liveui: { type: Boolean }, liveTracker: { type: Object }, disablePictureInPicture: { type: Boolean, onChange: function(e, n) {
  return e.disablePictureInPicture(n);
} }, notSupportedMessage: { type: String }, normalizeAutoplay: { type: Boolean }, noUITitleAttributes: { type: Boolean }, preferFullWindow: { type: Boolean }, suppressNotSupportedError: { type: Boolean }, techCanOverridePoster: { type: Boolean }, reportTouchActivity: { type: Boolean }, techOrder: { type: Array }, inactivityTimeout: { type: Number }, userActions: { type: Object }, plugins: { type: Object }, restoreEl: { type: [Boolean, Object] }, "vtt.js": { type: String } };
var v = { children: { type: [Array, Object] }, controlBar: { type: Object, onChange: function(e, n) {
  return e.controlBar.options(n);
} } };
var y = { html5: { type: Object } };
var h2 = { volume: { type: Number, onChange: function(e, n) {
  return e.volume(n);
}, onEvent: function(e, n) {
  return e.on("volumechange", function() {
    return n(e.volume());
  });
} }, playbackRate: { type: Number, onChange: function(e, n) {
  e.playbackRate(n), e.defaultPlaybackRate(n);
}, onEvent: function(e, n) {
  e.on("ratechange", function() {
    n(e.playbackRate());
  });
} }, options: { type: Object } };
var b = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, d), f), v), y), h2);
var m = Object.keys(b);
var O = Object.assign(Object.assign(Object.assign(Object.assign({}, { loadstart: "onLoadStart", suspend: "onSuspend", abort: "onAbort", error: "onError", emptied: "onEmptied", stalled: "onStalled", loadedmetadata: "onLoadedMetadata", loadeddata: "onLoadedData", canplay: "onCanPlay", canplaythrough: "onCanPlayThrough", playing: "onPlaying", waiting: "onWaiting", seeking: "onSeeking", seeked: "onSeeked", ended: "onEnded", durationchange: "onDurationChange", timeupdate: "onTimeUpdate", progress: "onProgress", play: "onPlay", pause: "onpause", ratechange: "onRateChange", resize: "onResize", volumechange: "onVolumeChange" }), { posterchange: "onPosterChange", languagechange: "onLanguageChange", fullscreenchange: "onFullscreenChange", playbackrateschange: "onPlaybackRatesChange", controlsdisabled: "onControlsDisabled", controlsenabled: "onControlsEnabled", enterFullWindow: "onEnterFullWindow", exitFullWindow: "onExitFullWindow", enterpictureinpicture: "onEnterPictureInPicture", leavepictureinpicture: "onLeavePictureInPicture", sourceset: "onSourceSet", texttrackchange: "onTextTrackChange", textdata: "onTextData", useractive: "onUserActive", userinactive: "onUserInactive", usingcustomcontrols: "onUsingCustomControls", usingnativecontrols: "onUsingNativeControls", dispose: "onDispose" }), { beforepluginsetup: "onBeforePluginSetup", pluginsetup: "onPluginSetup" }), { componentresize: "onComponentResize", playerresize: "onPlayerResize", ready: "onReady", tap: "onTap" });
var k = Object.keys(O);
Object.values(O);
var C = function(e) {
  var n, t = null == e ? void 0 : e.trim().replace(/\s+/g, " ");
  return t && null !== (n = t.split(" ")) && void 0 !== n ? n : [];
};
var j = { src: { getter: function(e) {
  return e.src();
} }, currentSrc: { getter: function(e) {
  return e.currentSrc();
} }, currentSource: { getter: function(e) {
  return e.currentSource();
} }, width: { events: ["resize", "playerresize"], getter: function(e) {
  return e.width();
} }, height: { events: ["resize", "playerresize"], getter: function(e) {
  return e.height();
} }, currentWidth: { events: ["resize", "playerresize"], getter: function(e) {
  return e.currentWidth();
} }, currentHeight: { events: ["resize", "playerresize"], getter: function(e) {
  return e.currentHeight();
} }, videoWidth: { events: ["resize", "playerresize"], getter: function(e) {
  return e.videoWidth();
} }, videoHeight: { events: ["resize", "playerresize"], getter: function(e) {
  return e.videoHeight();
} }, controls: { events: ["controlsdisabled", "controlsenabled"], getter: function(e) {
  return e.controls();
} }, volume: { events: ["volumechange"], getter: function(e) {
  return e.volume();
} }, muted: { events: ["volumechange"], getter: function(e) {
  return e.muted();
} }, poster: { events: ["posterchange"], getter: function(e) {
  return e.poster();
} }, seeking: { events: ["seeking"], getter: function(e) {
  return e.seeking();
} }, paused: { events: ["pause", "play", "playing"], getter: function(e) {
  return e.paused();
} }, ended: { events: ["ended", "play"], getter: function(e) {
  return e.ended();
} }, currentTime: { events: ["timeupdate"], getter: function(e) {
  return e.currentTime();
} }, duration: { events: ["durationchange"], getter: function(e) {
  return e.duration();
} }, playbackRate: { events: ["ratechange"], getter: function(e) {
  return e.playbackRate();
} }, playbackRates: { events: ["playbackrateschange"], getter: function(e) {
  return e.playbackRates();
} }, isFullscreen: { events: ["fullscreenchange"], getter: function(e) {
  return e.isFullscreen();
} }, isInPictureInPicture: { events: ["enterpictureinpicture", "leavepictureinpicture"], getter: function(e) {
  return e.isInPictureInPicture();
} }, isLive: { getter: function(e) {
  var n;
  return null === (n = e.liveTracker) || void 0 === n ? void 0 : n.isLive();
} }, language: { events: ["languagechange"], getter: function(e) {
  return e.language();
} }, userActive: { events: ["useractive", "userinactive"], getter: function(e) {
  return e.userActive();
} }, readyState: { events: ["loadeddata"], getter: function(e) {
  return e.readyState();
} }, networkState: { events: ["loadeddata", "error"], getter: function(e) {
  return e.networkState();
} }, error: { events: ["loadeddata", "error"], getter: function(e) {
  return e.error();
} }, buffered: { events: ["progress"], getter: function(e) {
  return e.buffered();
} }, bufferedPercent: { events: ["progress"], getter: function(e) {
  return e.bufferedPercent();
} }, played: { events: ["timeupdate"], getter: function(e) {
  return e.played();
} }, seekable: { events: ["progress", "seeked"], getter: function(e) {
  return e.seekable();
} }, audioTracks: { getter: function(e) {
  var n;
  return null === (n = e.audioTracks) || void 0 === n ? void 0 : n.call(e);
} }, videoTracks: { getter: function(e) {
  var n;
  return null === (n = e.videoTracks) || void 0 === n ? void 0 : n.call(e);
} }, textTracks: { getter: function(e) {
  var n;
  return null === (n = e.textTracks) || void 0 === n ? void 0 : n.call(e);
} } };
var P = m.filter(function(e) {
  return Boolean(b[e].onEvent);
});
var S = function(e) {
  return "update:" + e;
};
var E = k.concat(P.map(S));
var T = m.reduce(function(e, n) {
  var t, r = b[n], o = Array.isArray(r.type) ? r.type : [r.type], a = Object.assign({}, r);
  return o.includes(Boolean) && (a.default = void 0), Object.assign(Object.assign({}, e), ((t = {})[n] = a, t));
}, {});
var B = defineComponent({ name: "VueVideoPlayer", props: Object.assign(Object.assign({}, T), { class: [String, Object, Array] }), emits: E.concat(["mounted"], ["unmounted"]), setup: function(e, d2) {
  var f2 = toRaw(e), v2 = f2.class, y2 = g(f2, ["class"]), h3 = shallowRef(false), O2 = shallowRef(null), E2 = shallowRef(null), T2 = computed(function() {
    return E2.value ? E2.value.player : null;
  }), B2 = ref(null), R2 = computed(function() {
    return B2.value ? readonly(B2.value) : null;
  });
  return onMounted(function() {
    var n, t = function(e2) {
      var n2, t2 = e2.props, r = e2.element, o = e2.className, a = e2.onEvent, i = t2.options;
      void 0 === i && (i = {});
      var u = g(t2, ["options"]), c = {};
      Object.keys(u).forEach(function(e3) {
        var n3 = u[e3];
        void 0 !== n3 && (c[e3] = n3);
      });
      var l = Object.assign(Object.assign({}, c), i), s = l.volume, d3 = l.playbackRate, f3 = g(l, ["volume", "playbackRate"]), v3 = Object.assign(Object.assign({}, f3), { playsinline: null !== (n2 = f3.playsinline) && void 0 !== n2 ? n2 : f3.playsInline }), y3 = video_es_default(r, v3, function() {
        var e3 = this;
        k.forEach(function(n3) {
          e3.on(n3, function(e4) {
            a(n3, e4);
          });
        }), f3.src && !f3.sources && this.src(f3.src), s && Number.isFinite(s) && this.volume(s), d3 && Number.isFinite(d3) && (this.defaultPlaybackRate(d3), setTimeout(function() {
          e3.playbackRate(d3);
        }, 0));
      });
      o && C(o).map(function(e3) {
        return y3.addClass(e3);
      });
      var h4 = function(e3) {
        var n3;
        null === (n3 = y3.options) || void 0 === n3 || n3.call(y3, null != e3 ? e3 : {});
      };
      return { player: y3, dispose: function() {
        return y3.dispose();
      }, updateClassNames: function(e3, n3) {
        C(e3).map(function(e4) {
          return y3.removeClass(e4);
        }), C(n3).map(function(e4) {
          return y3.addClass(e4);
        });
      }, updateOptions: h4, updatePropOption: function(e3, n3) {
        var t3, r2, o2;
        h4(((t3 = {})[e3] = n3, t3)), null === (o2 = null === (r2 = b[e3]) || void 0 === r2 ? void 0 : r2.onChange) || void 0 === o2 || o2.call(r2, y3, n3);
      } };
    }({ element: O2.value, props: y2, onEvent: d2.emit });
    n = { player: t.player, onEvent: d2.emit }, P.forEach(function(e2) {
      var t2, r;
      null === (r = null === (t2 = b[e2]) || void 0 === t2 ? void 0 : t2.onEvent) || void 0 === r || r.call(t2, n.player, function(t3) {
        n.onEvent(S(e2), t3);
      });
    }), watch(function() {
      return e.class;
    }, function(e2, n2) {
      var r = normalizeClass(n2), o = normalizeClass(e2);
      t.updateClassNames(r, o);
    }, { immediate: true }), watch(function() {
      return e.options;
    }, function(e2) {
      return t.updateOptions(null != e2 ? e2 : {});
    }, { deep: true }), m.filter(function(e2) {
      return "options" !== e2;
    }).forEach(function(n2) {
      watch(function() {
        return e[n2];
      }, function(e2) {
        return t.updatePropOption(n2, e2);
      }, { deep: true });
    }), function(e2, n2) {
      var t2 = Object.keys(j), r = t2.reduce(function(n3, t3) {
        var r2;
        return Object.assign(Object.assign({}, n3), ((r2 = {})[t3] = j[t3].getter(e2), r2));
      }, { playing: false, waiting: false }), o = function(e3, t3) {
        r[e3] = t3, n2.onUpdate(e3, t3, Object.assign({}, r));
      };
      e2.on(["pause", "ended"], function() {
        o("playing", false);
      }), e2.on(["play", "playing"], function() {
        o("playing", true);
      }), e2.on("waiting", function() {
        o("waiting", true);
        var n3 = e2.currentTime(), t3 = function() {
          n3 !== e2.currentTime() && (o("waiting", false), e2.off("timeupdate", t3));
        };
        e2.on("timeupdate", t3);
      }), t2.forEach(function(n3) {
        var t3, r2 = j[n3];
        e2.on(["loadstart", "loadedmetadata"].concat(null !== (t3 = r2.events) && void 0 !== t3 ? t3 : []), function() {
          o(n3, r2.getter(e2));
        });
      }), n2.onInit(Object.assign({}, r));
    }(t.player, { onInit: function(e2) {
      B2.value = e2;
    }, onUpdate: function(e2, n2) {
      B2.value && (B2.value[e2] = n2);
    } }), E2.value = t, h3.value = true, d2.emit("mounted", { video: O2.value, player: T2.value, state: R2.value });
  }), onBeforeUnmount(function() {
    E2.value && (E2.value.dispose(), E2.value = null, B2.value = null, d2.emit("unmounted"));
  }), function() {
    var e2, n;
    return h("div", { "data-vjs-player": "", class: normalizeClass(v2) }, [h("video", { class: ["video-js", "v-video-player"], ref: O2 }), h3.value && (null === (n = (e2 = d2.slots).default) || void 0 === n ? void 0 : n.call(e2, { video: O2.value, player: T2.value, state: R2.value }))]);
  };
} });
var R = B;
var z = function(e) {
  e.component("VideoPlayer", B), e.component(B.name, B);
};
var w = { VideoPlayer: B, install: z };

// node_modules/vue-video-player/index.js
var vue_video_player_default = w;
export {
  R as VideoPlayer,
  vue_video_player_default as default,
  z as install
};
//# sourceMappingURL=vue-video-player.js.map
